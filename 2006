<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>To-Do List</title>
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <div class="container">
        <h1>To-Do List</h1>
        <div class="input-container">
            <input type="text" id="task-input" placeholder="Add a new task">
            <button id="add-task-button">Add Task</button>
        </div>
        <ul id="task-list"></ul>
    </div>
    <script src="scripts.js"></script>
</body>
</html>
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.container {
    background-color: #fff;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

h1 {
    text-align: center;
}

.input-container {
    display: flex;
    margin-bottom: 20px;
}

#task-input {
    flex: 1;
    padding: 10px;
    border: 1px solid #ccc;
    border-radius: 4px;
}

#add-task-button {
    padding: 10px;
    margin-left: 10px;
    border: none;
    background-color: #007bff;
    color: white;
    border-radius: 4px;
    cursor: pointer;
}

#add-task-button:hover {
    background-color: #0056b3;
}

#task-list {
    list-style: none;
    padding: 0;
}

.task-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px;
    border-bottom: 1px solid #ccc;
}

.task-item.completed .task-text {
    text-decoration: line-through;
    color: #777;
}

.task-text {
    flex: 1;
}

.task-buttons {
    display: flex;
    gap: 5px;
}

.task-buttons button {
    border: none;
    padding: 5px 10px;
    cursor: pointer;
    border-radius: 4px;
}

.task-buttons .edit-button {
    background-color: #ffc107;
    color: white;
}

.task-buttons .edit-button:hover {
    background-color: #e0a800;
}

.task-buttons .delete-button {
    background-color: #dc3545;
    color: white;
}

.task-buttons .delete-button:hover {
    background-color: #c82333;
}
document.addEventListener('DOMContentLoaded', () => {
    const taskInput = document.getElementById('task-input');
    const addTaskButton = document.getElementById('add-task-button');
    const taskList = document.getElementById('task-list');

    addTaskButton.addEventListener('click', addTask);

    // Load tasks from local storage
    loadTasks();

    function addTask() {
        const taskText = taskInput.value.trim();
        if (taskText) {
            const taskItem = createTaskItem(taskText);
            taskList.appendChild(taskItem);
            saveTasks();
            taskInput.value = '';
        }
    }

    function createTaskItem(text) {
        const taskItem = document.createElement('li');
        taskItem.className = 'task-item';

        const taskText = document.createElement('span');
        taskText.className = 'task-text';
        taskText.textContent = text;
        taskItem.appendChild(taskText);

        const taskButtons = document.createElement('div');
        taskButtons.className = 'task-buttons';

        const editButton = document.createElement('button');
        editButton.className = 'edit-button';
        editButton.textContent = 'Edit';
        editButton.addEventListener('click', () => editTask(taskItem, taskText));
        taskButtons.appendChild(editButton);

        const deleteButton = document.createElement('button');
        deleteButton.className = 'delete-button';
        deleteButton.textContent = 'Delete';
        deleteButton.addEventListener('click', () => deleteTask(taskItem));
        taskButtons.appendChild(deleteButton);

        const toggleButton = document.createElement('button');
        toggleButton.className = 'toggle-button';
        toggleButton.textContent = 'Complete';
        toggleButton.addEventListener('click', () => toggleTask(taskItem, taskText));
        taskButtons.appendChild(toggleButton);

        taskItem.appendChild(taskButtons);

        return taskItem;
    }

    function editTask(taskItem, taskText) {
        const newText = prompt('Edit task:', taskText.textContent);
        if (newText) {
            taskText.textContent = newText;
            saveTasks();
        }
    }

    function deleteTask(taskItem) {
        taskItem.remove();
        saveTasks();
    }

    function toggleTask(taskItem, taskText) {
        taskItem.classList.toggle('completed');
        saveTasks();
    }

    function saveTasks() {
        const tasks = [];
        document.querySelectorAll('.task-item').forEach(taskItem => {
            tasks.push({
                text: taskItem.querySelector('.task-text').textContent,
                completed: taskItem.classList.contains('completed')
            });
        });
        localStorage.setItem('tasks', JSON.stringify(tasks));
    }

    function loadTasks() {
        const tasks = JSON.parse(localStorage.getItem('tasks')) || [];
        tasks.forEach(task => {
            const taskItem = createTaskItem(task.text);
            if (task.completed) {
                taskItem.classList.add('completed');
            }
            taskList.appendChild(taskItem);
        });
    }
});

